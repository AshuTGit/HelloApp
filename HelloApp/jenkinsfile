pipeline {
    agent any
    
    // Define tools
    tools {
        maven 'Maven'  // Name configured in Jenkins Global Tool Configuration
        jdk 'jdk-17.0.12'         // Name configured in Jenkins Global Tool Configuration
    }
    
    // Environment variables
    environment {
        // Tomcat configuration
        TOMCAT_URL = 'http://localhost:8081'
        TOMCAT_CREDENTIALS_ID = 'tomcat-deployer'
        CONTEXT_PATH = '/HelloApp'
        
        // Maven settings
        MAVEN_OPTS = '-Xmx1024m -XX:MaxPermSize=512m'
        
        // Git repository
        GIT_REPO = 'https://github.com/AshuTGit/HelloApp.git'
        GIT_BRANCH = 'master'
        GIT_CREDENTIALS_ID = 'd886000d-1856-47bd-8741-5cde9198fbb5'
    }
    
    // Build triggers
    triggers {
        // Poll SCM every minute
        pollSCM('* * * * *')
        
        // Or use GitHub webhook
        // githubPush()
    }
    
    stages {
        
        stage('Checkout') {
            steps {
                echo '========== Checking out code from Git =========='
                git branch: "${GIT_BRANCH}",
                    credentialsId: "${GIT_CREDENTIALS_ID}",
                    url: "${GIT_REPO}"
            }
        }
        
        stage('Build') {
            steps {
                echo '========== Building Maven Project =========='
                sh 'mvn clean compile'
            }
        }
        
        stage('Test') {
            steps {
                echo '========== Running Unit Tests =========='
                sh 'mvn test'
            }
            post {
                always {
                    // Archive test results
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Package') {
            steps {
                echo '========== Packaging Application =========='
                sh 'mvn package -DskipTests'
            }
            post {
                success {
                    // Archive the WAR file
                    archiveArtifacts artifacts: '**/target/*.war', fingerprint: true
                }
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                echo '========== Running Code Quality Checks =========='
                // Uncomment if SonarQube is configured
                // sh 'mvn sonar:sonar'
                
                // Run simple checks
                sh 'mvn checkstyle:checkstyle'
            }
        }
        
        stage('Deploy to Tomcat') {
            steps {
                echo '========== Deploying to Tomcat =========='
                script {
                    // Deploy using Deploy to Container plugin
                    deploy adapters: [
                        tomcat9(
                            credentialsId: "${TOMCAT_CREDENTIALS_ID}",
                            path: '',
                            url: "${TOMCAT_URL}"
                        )
                    ],
                    contextPath: "${CONTEXT_PATH}",
                    war: '**/target/*.war',
                    onFailure: false
                }
            }
        }
        
        stage('Smoke Test') {
            steps {
                echo '========== Running Smoke Tests =========='
                script {
                    // Wait for deployment to complete
                    sleep(time: 10, unit: 'SECONDS')
                    
                    // Check if application is accessible
                    def response = sh(
                        script: "curl -s -o /dev/null -w '%{http_code}' ${TOMCAT_URL}${CONTEXT_PATH}",
                        returnStdout: true
                    ).trim()
                    
                    if (response == '200') {
                        echo "✓ Application deployed successfully! HTTP Status: ${response}"
                    } else {
                        error "✗ Application deployment failed! HTTP Status: ${response}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo '========== Pipeline Execution Completed =========='
            // Clean workspace
            cleanWs()
        }
        success {
            echo '✓ Pipeline executed successfully!'
            // Send notifications (Email, Slack, etc.)
            emailext(
                subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                    <p>Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' completed successfully.</p>
                    <p>Check console output at <a href='${env.BUILD_URL}'>${env.BUILD_URL}</a></p>
                """,
                to: 'team@example.com',
                mimeType: 'text/html'
            )
        }
        failure {
            echo '✗ Pipeline execution failed!'
            emailext(
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                    <p>Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' failed.</p>
                    <p>Check console output at <a href='${env.BUILD_URL}'>${env.BUILD_URL}</a></p>
                """,
                to: 'team@example.com',
                mimeType: 'text/html'
            )
        }
        unstable {
            echo '⚠ Pipeline is unstable!'
        }
    }
}

